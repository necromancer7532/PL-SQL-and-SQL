					ASSIGNMENTS
1) Accept job type from the user. Display the message depending upon whether  
     no rows or one row or several rows are selected.
      The message should be any one from the below 3 as per the situation.
     	JOB TYPE FOUND ONCE
            JOB TYPE FOUND MORE THAN ONCE
            JOB TYPE NOT FOUND 

2) Using basic loop technique display all the multiples of 7 between 31 and 48.
3) Write a PL/SQL code to display the name, salary and grade of the employee by accepting employee code. Grade is ‘A’ if salary >25000, ‘B’ if salary > 15000, ‘C’ for other salaries. Use CASE statement only.
4) Check whether the 3rd Clerk’s salary is greater than the 2nd Clerk’s salary. If it is so, 		then display message as “Third has more salary than the second” otherwise display 		message as “Second has more salary than the first”
5) The management has decided to increase salary of employees by 10%. Starting with lowest paid 	earner and working up. If at any time salary bill exceeds 45000/- then no further 	employees are to be given an increase. 
6) Use a parameterized cursor which will take deptno as the parameter and will display the 	highest two salaries of that deptno.
7) ) Create the table Emp_Coupons with the two fields Name and Coupon_No
 	Enter the following records in it.
	
John	80
Martin	83
Allen	87
Roger	78
Adams	88
Kim	89

Make a PLSQL block that will check whether the coupon number of the current record is greater than the previous. If any record’s coupon number is less than the previous one then display the name of the person whose coupon number is less.
8) 				PLSQL Table Assignments                         

	Add multiples of 5 from 5 to 130 in a plsql table and display them from the plsql table 	in the descending order.
9) Accept the name of the employee. Display the salary of that employee.
	Handle all possible run-time errors.
10) Create a table Emp_Details which has the following specifications.
		
Name		Data type	Constraint
Empno		Integer		Primary Key
Membership_no	Char		Unique
Name 		Varchar		Not Null
Salary		Integer		Above 10000
Mgr		Integer		Refers to the Empno column

	Take all the column values from the user and enter the record in the table Emp_Details. If any constraint violation happens then provide user friendly error message according to the error.
11) Create a table Emp_Proc having structure and records same as that of emp table.
	Create a procedure Delete_Employee that will take department name as a parameter. The 	procedure should delete the record of the employees from the Emp_EmployeeID table only 	for the department name passed.
12) Create a table Company_Data with columns empid, ename and job. There is no primary key 		or unique key constraint to the empid column. 
       Create a procedure Add_Company_Data which will take empid as the parameter and adds a 		new record in that table if the empid with the same value does not exist.
13)  Considering the emp table create a procedure IsHighest that will take ename as the 		parameter.The procedure should reply whether employee is the highest earner or not. 
14) Create a table student. It has four fields rollno, name, marks and grade.
   	Note – Grade column has be generated by a function get_Grade(). This function takes 	marks as argument and generates the grade as per the following table

	Marks Criteria			Grade
	Greater than or equal to 70	Distinction
	Between 60 and 69		First Class
	Between 50 and 59		Second Class
	Less than 50			Failed.
	
	When the record is inserted then the grade value should be generated.
15) Create a function Yearly_Raise that will take the salary, deptno and job as the parameters 	and raise the salary according to different criteria.
	Criteria							Raise
	Clerk employees of deptno 20 earning salary above 1000		20% 
	Clerk employees of deptno 20 earning salary less 1000		15%
	Clerk employees of deptno 20 earning salary above 1000		25%
	Clerk employees of deptno 20 earning salary less than 1000	18%
	Clerk employees of deptno 30 having any salary			10%
	
	Use this function to update salaries of the employees of job Clerk in the table emp.
16)Create a function named USER_VALID_DEPTNO that has a single parameter p_dno to accept a department number and returns a BOOLEAN value. The function returns TRUE if the department number exists in the DEPARTMENTS table else it returns FALSE.
•	Create a procedure named SHOW_STRENGTH that accepts department number in a single parameter p_deptno from user. The procedure gives a call to USER_VALID_DEPTNO. If the function returns TRUE then the procedure finds out how many employees are there in the department from the EMPLOYEES table and displays the same on the screen. If the function returns FALSE then the procedure displays an appropriate error message.
•	Give call to SHOW_STRENGTH by passing on department number 10. Do the same for department number 76


17) Create a package Emp_Package that will have a plsql table called Emp_Info containing Enames 	and Sal from the emp table.
	The package has two procedure Show_Clerks and Show_Managers which will display the 	enames and salaries of the Clerks and Managers respectively. These procedures should 	take the names and salaries from the Emp_Info plsql table only.
	The Emp_Info always should get loaded within the session first when any of the package 	member is getting called for the first time within that session.
18) Create a trigger DML_on_View which will allow insert, update and delete for a view which is 	based on an inner join between tables Emp and Dept


















